#pragma once
#include <string>
#include <deque>
#include <vector>
#include <math.h>
#include "fileRead.h"

using namespace std;

class PolyPhaseFilter
{
public:

	/**
	 * \brief
	 * \param inFile input file containing x[n] data
	 * \param outFile desired output file for y[n]
	 * \param M upsampling rate
	 * \param L downsampling rate
	 */
	PolyPhaseFilter(const string& inFile, const string& outFile, int L, int M)
		: file(inFile, outFile), upRate(L), downRate(M)
	{ }

	/**
	 * \brief The filter system for performing sampling rate conversion L/M. Straightforward, not polyphase
	 */
	void Filter()
	{
		printf("performing normal filter\n");
		xBuff.clear();
		xBuff.resize(1, vector<double>(FILTER_SIZE));
		file.goToStartOfData();
		deque<float> yBuffer;
		while (!file.eof)
		{

			//Upsample
			yBuffer.push_back(Filter(file.GetValue()));
			for (auto i = 0; i < upRate - 1; i++)
			{
				yBuffer.push_back(Filter(0));
			}

			//Downsample
			while (yBuffer.size() >= downRate)
			{
				file.WriteValue(yBuffer[0]);
				yBuffer.erase(yBuffer.begin(), yBuffer.begin() + downRate);

			}
		}
		//flush out remaining y values
		if (yBuffer.size() > 0)
		{
			file.WriteValue(yBuffer[0]);
		}
		//update header
		file.outFileHeader.dim1 = floor((double) file.outFileHeader.dim1 * (double) (upRate) / (double) downRate);
	}

	/**
	 * \brief The polyphase filter system for performing sample rate conversion L/M.
	 */
	void PolyFilter()
	{
		printf("performing PolyFilter\n");
		xBuff.clear();
		xBuff.resize(upRate*downRate, vector<double>(FILTER_SIZE / (upRate * downRate)));
		file.goToStartOfData();
		deque<float> yBuffer(upRate);

		auto l = 0, futureXValues = upRate - 1;
		while (!file.eof)
		{
			auto newX = file.GetValue();			

			for (auto k = 0; k < upRate; k++)
			{
				auto ll = (l + (upRate - 1) - k) % downRate;
				ShiftXBuffRight(xBuff[ll + downRate * k]);
				xBuff[ll + downRate * k][0] = newX;
				yBuffer[k] += PolyFilter(k, ll);
			}
			//write y values to file if #downrate x[n] have occured
			if (++l == downRate)
			{
				/*for (auto yVal : yBuffer)
				{
					file.WriteValue(yVal);
				}*/
				for (int i = yBuffer.size() - 1; i >= 0; i--)
				{
					file.WriteValue(static_cast<float>(yBuffer[i]));
				}
				fill(yBuffer.begin(), yBuffer.end(), 0.0);
				l = 0;
			}
		}
		file.outFileHeader.dim1 = floor((double) file.outFileHeader.dim1 * (double) (upRate) / (double) downRate);

	}


private:

	FileRead file;
	const int static FILTER_SIZE = 192;
	vector<vector<double>> xBuff;
	const int upRate, downRate;


	/**
	 * \brief Shift the given array right by one and put 0 at x[0]
	 * \param x array to shift
	 */
	void ShiftXBuffRight(vector<double> &x)
	{
		for (auto i = x.size() - 1; i > 0; i--)
		{
			x[i] = x[i - 1];
		}
		x[0] = 0.0;
	}

	/**
	 * \brief filters the given x value through a FIR filter.
	 * This is only the filter, does not up or down sample.
	 * \param x input x'[n] value
	 * \return output y'[n] value
	 */
	float Filter(float x)
	{
		auto y = 0.0;
		// Step 1. Shift xbuff and put x into xbuff[0]
		ShiftXBuffRight(xBuff[0]);
		xBuff[0][0] = x;
		// Step 3. Accumulate filter output into y
		for (auto i = 0; i < FILTER_SIZE; i++)
		{
			y += FIRValues[i] * xBuff[0][i];
		}

		return static_cast<float>(y);
	}
	/**
	 * \brief Splits the FIR filter into multiple parts to perform Poly Phase Filtering
	 * \param k 1st filter coefficient R_kl
	 * \param l 2nd filter coefficient R_kl
	 * \return
	 */
	double PolyFilter(int k, int l)
	{

		auto y = 0.0;
		for (auto n = 0; n < FILTER_SIZE / (upRate * downRate); n++)
		{
			//indexes used to split up H into R_kl and X into X_k
			//y += FIRValues[downRate*(upRate*n + upRate - 1 - k) + l] * polyXBuff(n - (upRate - 1) + k);
			auto hIndex = upRate * (downRate*n + l) + (upRate - 1) - k;
			auto xIndex = n + (upRate - 1 - k) + l;
			y += FIRValues[hIndex] * xBuff[l+downRate*k][n];

		}
		return y;
	}

	// ReSharper disable once CppInconsistentNaming
	//pass band 0.2, stop band 0.25, 0.001 dB pass band, 80 dB stop band
	const double FIRValues[FILTER_SIZE] =
	{
	-0.000024934725597404746959533800021446837,
-0.000065636259920756053832038845463614507,
 0.000001041150238862995698781166442614676,
 0.000011660091247619422150398268978044314,
 0.000052352687017094597511472631179429982,
 0.00006499893961617480057056661646441853 ,
 0.000047861859425364907338028286343245554,
-0.00000458533125515791779684693363350334 ,
-0.000069917636882030161278069047003924652,
-0.000114361356738234653911134852677378149,
-0.00010577366673444671060777544369102543 ,
-0.000034694375084613491623010406161853325,
 0.000074690970214807560385861240348503998,
 0.00016996181251098435084113946746953161 ,
 0.000193775566366671884695541128174056666,
 0.000115641999385588783435738213789534257,
-0.000044525704547401544544909385292541515,
-0.000216252044823916228250687554535147683,
-0.000307075678293204775912150772398945264,
-0.00024964541329026084621675596331158431 ,
-0.000044522380354090594915990319879739445,
 0.000226307040306566163191670515431042077,
 0.000428474397663484800856392720191934131,
 0.000438979869858333027459601494157936941,
 0.00021574045374895148914802522899236692 ,
-0.000164301369933395058353653439553454518,
-0.000525350865445688695355708208722944619,
-0.000670445129333984801527079877558890075,
-0.000484331495295036384106379667713326853,
-0.000009647993452584083598488895461287029,
 0.000549417212097273732762658937645028345,
 0.000909895047412133005024226228840689146,
 0.000848676037135976616548882489610150515,
 0.000331145655315976425274449024271916642,
-0.000440752022116357069624753561853935935,
-0.001099392938591296732184221518480171653,
-0.001281336965236502378057137363498441118,
-0.000820291767160266746712615759662412529,
 0.00013610006897614527207954204790496533 ,
 0.001158680984476364401666859116346586234,
 0.001722495538229814552450003262151767558,
 0.001469198887670515553047212442550062406,
 0.000418141270010042936326050133644116613,
-0.000992238004107560533223475474073893565,
-0.002077183186843121510956056141594672226,
-0.00223033573102634748511197138043371524 ,
-0.00125024872686162950678745442445460867 ,
 0.000502119040231998811640856672511290526,
 0.002218938714006200678408031734534233692,
 0.003008352809175654160589452601470838999,
 0.002346477029417598156313395918459718814,
 0.000394592016990935275967677942077216358,
-0.001999850288268604798364025398882404261,
-0.003657611339089738775043336715953046223,
-0.003636425515971153377137170537025667727,
-0.001745396873668303037649418563148628891,
 0.001266925760370259720216656873503779934,
 0.003986570304187937036077826746804930735,
 0.004983089934751115494815376649739846471,
 0.003542558277226478223587147198259117431,
 0.000117743521864981689865892189317264638,
-0.003768296876769073548013588847993560194,
-0.006178693850696316200443725108470971463,
-0.005706671689582942796903353155357763171,
-0.002256737924765969509344198939970738138,
 0.00275431575298191056583307911864721973 ,
 0.006945732038727860796489821382238005754,
 0.008075999802919288719782464625041029649,
 0.005202617612171959483868821649821256869,
-0.000684345737118236506490998038998441189,
-0.006937461504364140531253557497848305502,
-0.010401329782366196957665849254226486664,
-0.008956111966148740111126613783198990859,
-0.002722062332771117872110000490692982567,
 0.00572285217763909056370996708551501797 ,
 0.012340139889645773685344920522766187787,
 0.013489364465165333550888959734948002733,
 0.00782428341512969756366135953840057482 ,
-0.002715938011373531663084079923464742023,
-0.013428967962625965038014896890672389418,
-0.018823026349477467444870626422925852239,
-0.015262232182947204836565013863491913071,
-0.003077326146603935174556054832351037476,
 0.012959630076951085889125359074114385294,
 0.025258306327792200834947422549703333061,
 0.0266609576335534101398927475656819297  ,
 0.014032211507927249902194510866593191167,
-0.009416735171555725217307220020757085877,
-0.034295575437389591577641567710088565946,
-0.047953435557098647579188366307789692655,
-0.03923348459064074367219632222258951515 ,
-0.003269816833183489257486087353754555807,
 0.05565084805617202118321884540819155518 ,
 0.124494971998675318936022904381388798356,
 0.185251215220669562810940078634303063154,
 0.220809878549311722206738295426475815475,
 0.220809878549311722206738295426475815475,
 0.185251215220669562810940078634303063154,
 0.124494971998675318936022904381388798356,
 0.05565084805617202118321884540819155518 ,
-0.003269816833183489257486087353754555807,
-0.03923348459064074367219632222258951515 ,
-0.047953435557098647579188366307789692655,
-0.034295575437389591577641567710088565946,
-0.009416735171555725217307220020757085877,
 0.014032211507927249902194510866593191167,
 0.0266609576335534101398927475656819297  ,
 0.025258306327792200834947422549703333061,
 0.012959630076951085889125359074114385294,
-0.003077326146603935174556054832351037476,
-0.015262232182947204836565013863491913071,
-0.018823026349477467444870626422925852239,
-0.013428967962625965038014896890672389418,
-0.002715938011373531663084079923464742023,
 0.00782428341512969756366135953840057482 ,
 0.013489364465165333550888959734948002733,
 0.012340139889645773685344920522766187787,
 0.00572285217763909056370996708551501797 ,
-0.002722062332771117872110000490692982567,
-0.008956111966148740111126613783198990859,
-0.010401329782366196957665849254226486664,
-0.006937461504364140531253557497848305502,
-0.000684345737118236506490998038998441189,
 0.005202617612171959483868821649821256869,
 0.008075999802919288719782464625041029649,
 0.006945732038727860796489821382238005754,
 0.00275431575298191056583307911864721973 ,
-0.002256737924765969509344198939970738138,
-0.005706671689582942796903353155357763171,
-0.006178693850696316200443725108470971463,
-0.003768296876769073548013588847993560194,
 0.000117743521864981689865892189317264638,
 0.003542558277226478223587147198259117431,
 0.004983089934751115494815376649739846471,
 0.003986570304187937036077826746804930735,
 0.001266925760370259720216656873503779934,
-0.001745396873668303037649418563148628891,
-0.003636425515971153377137170537025667727,
-0.003657611339089738775043336715953046223,
-0.001999850288268604798364025398882404261,
 0.000394592016990935275967677942077216358,
 0.002346477029417598156313395918459718814,
 0.003008352809175654160589452601470838999,
 0.002218938714006200678408031734534233692,
 0.000502119040231998811640856672511290526,
-0.00125024872686162950678745442445460867 ,
-0.00223033573102634748511197138043371524 ,
-0.002077183186843121510956056141594672226,
-0.000992238004107560533223475474073893565,
 0.000418141270010042936326050133644116613,
 0.001469198887670515553047212442550062406,
 0.001722495538229814552450003262151767558,
 0.001158680984476364401666859116346586234,
 0.00013610006897614527207954204790496533 ,
-0.000820291767160266746712615759662412529,
-0.001281336965236502378057137363498441118,
-0.001099392938591296732184221518480171653,
-0.000440752022116357069624753561853935935,
 0.000331145655315976425274449024271916642,
 0.000848676037135976616548882489610150515,
 0.000909895047412133005024226228840689146,
 0.000549417212097273732762658937645028345,
-0.000009647993452584083598488895461287029,
-0.000484331495295036384106379667713326853,
-0.000670445129333984801527079877558890075,
-0.000525350865445688695355708208722944619,
-0.000164301369933395058353653439553454518,
 0.00021574045374895148914802522899236692 ,
 0.000438979869858333027459601494157936941,
 0.000428474397663484800856392720191934131,
 0.000226307040306566163191670515431042077,
-0.000044522380354090594915990319879739445,
-0.00024964541329026084621675596331158431 ,
-0.000307075678293204775912150772398945264,
-0.000216252044823916228250687554535147683,
-0.000044525704547401544544909385292541515,
 0.000115641999385588783435738213789534257,
 0.000193775566366671884695541128174056666,
 0.00016996181251098435084113946746953161 ,
 0.000074690970214807560385861240348503998,
-0.000034694375084613491623010406161853325,
-0.00010577366673444671060777544369102543 ,
-0.000114361356738234653911134852677378149,
-0.000069917636882030161278069047003924652,
-0.00000458533125515791779684693363350334 ,
 0.000047861859425364907338028286343245554,
 0.00006499893961617480057056661646441853 ,
 0.000052352687017094597511472631179429982,
 0.000011660091247619422150398268978044314,
 0.000001041150238862995698781166442614676,
-0.000065636259920756053832038845463614507,
-0.000024934725597404746959533800021446837
	};

};
